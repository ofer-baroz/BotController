
import matplotlib
matplotlib.use('TkAgg')
from cv_bridge import CvBridge, CvBridgeError

import numpy as np
import cv2
import matplotlib.pyplot as plt
from cv_bridge import CvBridge
from sensor_msgs.msg import Image

import rospy 

if __name__ == '__main__':
   
   #init ros node
    rospy.init_node('ImageEditor', anonymous=True)

    # init Publishers
    pub = rospy.Publisher("NEW_IMAGE_TOPIC", Image, queue_size=10)        
    
    # rate [Hz]
    rate = rospy.Rate(10)

    rospy.loginfo('Started')

    fig = plt.figure()
    #ax = plt.axes(xlim=(0 , 5), ylim=(0 , 10), xlabel='x', ylabel='y')
    bridge = CvBridge()
    imageFormat = 'bgr8'

#    cap = cv2.VideoCapture(0)


    x1 = np.linspace(0.0, 5.0)
    x2 = np.linspace(0.0, 2.0)

    y1 = np.cos(2 * np.pi * x1) * np.exp(-x1)
    y2 = np.cos(2 * np.pi * x2)

    #ax = plt.gca()
    #, 'ko-'
    line1, = plt.plot(x1, y1)        # so that we can update data later
    

    for i in range(1000):
        print(i)
        # update data
        line1.set_ydata(np.cos(2 * np.pi * (x1+i*3.14/2) ) * np.exp(-x1) )

        # redraw the canvas
        fig.canvas.draw()
        #ax.figure.canvas
        #ax = plt.axes(xlim=(0 , 5), ylim=(0 , 10), xlabel='x', ylabel='y')

        # convert canvas to image
        img = np.fromstring(fig.canvas.tostring_rgb(), dtype=np.uint8,
                sep='')
        img  = img.reshape(fig.canvas.get_width_height()[::-1] + (3,))

        # img is rgb, convert to opencv's default bgr
        img = cv2.cvtColor(img,cv2.COLOR_RGB2BGR)


        # display image with opencv or any operation you like
        cv2.imshow("plot",img)

        # display camera feed - useless??
        #ret,frame = cap.read()
        #cv2.imshow("cam",frame)

        #k = cv2.waitKey(1)# & 0xFF
       # print(k)
        #if k == 27:
        #    break

            
        #publish the image
        msg = bridge.cv2_to_imgmsg( img,imageFormat )  # Convert the image to a message
        pub.publish(msg)
        rospy.loginfo('New image published')
        rate.sleep()
        
   

