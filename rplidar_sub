#!/usr/bin/python3.6
  
# Import the necessary libraries
import rclpy # Python library for ROS 2
from rclpy.node import Node # Handles the creation of nodes
from sensor_msgs.msg import LaserScan, Image # Image is the message type
from cv_bridge import CvBridge, CvBridgeError # Package to convert between ROS and OpenCV Images
import cv2 # OpenCV library
import math
import numpy as np

 
NODE_NAME = 'rplidar_subscriber'
TOPIC_NAME = '/scan'
HEIGHT = 1000
WIDTH = 1000
WHITE = 255
TYPE = np.uint8



# Discretization Size
disc_size = .08
# Discretization Factor
disc_factor = 1/disc_size
# Max Lidar Range
max_lidar_range = 10
# Create Image Size Using Range and Discretization Factor
image_size = int(max_lidar_range*2*disc_factor)


class ImageSubscriber(Node):
  """
  Create an ImageSubscriber class, which is a subclass of the Node class.
  """
  def __init__(self):
    """
    Class constructor to set up the node
    """
    # Initiate the Node class's constructor and give it a name
    super().__init__(NODE_NAME)
      
    # Create the subscriber. This subscriber will receive an Image
    # from the video_frames topic. The queue size is 10 messages.
    self.subscription = self.create_subscription(
        LaserScan, 
        TOPIC_NAME, 
        self.scan_to_img_callback, 
        10)
    self.subscription # prevent unused variable warning
    self.publisher_ = self.create_publisher(Image, 'scan_to_img', 10)
    


    # Used to convert between ROS and OpenCV images
    self.bridge = CvBridge()
   
  def scan_to_img_callback(self, scan):
    """
    Callback function.
    """
    # Display the message on the console
    self.get_logger().info('Receiving rplidar msg')
    maxAngle = scan.angle_max
    minAngle = scan.angle_min
    angle_Inc = scan.angle_increment
    maxLength = scan.range_max
    ranges = scan.ranges
    num_pts = len(ranges)
    xy_scan = np.zeros((num_pts,2))
    blank_image = np.zeros( (image_size, image_size, 3), dtype=np.uint8 )
    
    #calculate X-Y coordinates
    for i in range(num_pts):
      if(ranges[i] >10) or (math.isnan(ranges[i])):
        pass
      else:
        angle = minAngle +float(i)*angle_Inc
        xy_scan[i][0] = float(ranges[i]*math.cos(angle))
        xy_scan[i][1] = float(ranges[i]*math.sin(angle))
    
    # color the mid point
    
    base_x = int(math.floor((max_lidar_range) * disc_factor))
    base_y = int(math.floor((max_lidar_range) * disc_factor))
    start_point = (base_x,base_y)
    color = [128,128,128] #gray
    thickness = 1 # single pixel

    for i in range(num_pts):
      pt_x = xy_scan[i,0]
      pt_y = xy_scan[i,1]
      
      #loop through all points
      if (pt_x < max_lidar_range) or (pt_x > -1 * (max_lidar_range-disc_size)) or (pt_y < max_lidar_range) or (pt_y > -1 * (max_lidar_range-disc_size)):
        pix_x = int(math.floor((pt_x + max_lidar_range) * disc_factor))
        pix_y = int(math.floor((max_lidar_range - pt_y) * disc_factor))

        #ignore center point
        if pix_x == base_x and pix_y == base_y:
          continue
        
        #exeption: value is out of image range
        if (pix_x > image_size) or (pix_y > image_size):
          print ('Error')

        #paint with color   
        else:
          end_point = (pix_x, pix_y)
          blank_image = cv2.line(blank_image, start_point, end_point, color, thickness)
          blank_image[pix_y,pix_x] = [0,0,255] #red

    #mark the center
    blank_image[base_y,base_x] = [255,255,255] # white
    #rotate image
    blank_image = cv2.rotate(blank_image, cv2.ROTATE_90_CLOCKWISE)
    
    
    #transform image to ROS img msg
    img = self.bridge.cv2_to_imgmsg(blank_image, encoding="bgr8")
    
    #publish ROS img msg
    self.publisher_.publish(img)

		# Use CV to show image
		# cv2.imshow('result', blank_image), cv2.waitKey(3)
		# blank_image = np.zeros((image_size,image_size,3))








        
  


def main(args=None):
  
  # Initialize the rclpy library
  rclpy.init(args=args)
  
  # Create the node
  image_subscriber = ImageSubscriber()
  
  # Spin the node so the callback function is called.
  rclpy.spin(image_subscriber)
  
  # Destroy the node explicitly
  # (optional - otherwise it will be done automatically
  # when the garbage collector destroys the node object)
  image_subscriber.destroy_node()
  
  # Shutdown the ROS client library for Python
  rclpy.shutdown()
  
if __name__ == '__main__':
  main()



   
    


        

